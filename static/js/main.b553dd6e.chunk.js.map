{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","inputState","setInputState","posts","setPosts","loading","setLoading","error","setError","request","a","axios","get","then","data","catch","err","type","placeholder","value","onChange","e","target","onClick","length","postsToFile","filter","post","link","map","title","url","blob","Blob","join","console","log","saveAs","saveFile","key","id","href","Boolean","window","location","hostname","match","customHistory","createBrowserHistory","ReactDOM","render","StrictMode","history","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"iPAgFeA,MA5Ef,WAAgB,IAAD,EACuBC,mBAAS,IADhC,mBACNC,EADM,KACMC,EADN,OAEaF,mBAAS,IAFtB,mBAENG,EAFM,KAECC,EAFD,OAGiBJ,oBAAS,GAH1B,mBAGNK,EAHM,KAGGC,EAHH,OAIaN,oBAAS,GAJtB,mBAINO,EAJM,KAICC,EAJD,KAMPC,EAAO,uCAAG,sBAAAC,EAAA,6DACdF,GAAS,GACTF,GAAW,GAFG,SAGRK,IACHC,IADG,0BACoBX,IACvBY,MAAK,SAACC,GAAD,OAAUV,EAASU,EAAKA,SAC7BC,OAAM,SAACC,GAGN,MAFAR,GAAS,GACTF,GAAW,GACLU,KATI,OAWdV,GAAW,GAXG,2CAAH,qDAuBb,OACE,6BACE,2BACEW,KAAK,OACLC,YAAY,wFACZC,MAAOlB,EACPmB,SAAU,SAACC,GAAD,OAAOnB,EAAcmB,EAAEC,OAAOH,UAE1C,4BAAQF,KAAK,SAASM,QAAS,kBAAMd,MAArC,YAGkB,IAAjBN,EAAMqB,QACL,4BAAQP,KAAK,SAASM,QAAS,kBArBpB,WACf,IAAME,EAActB,EACfuB,QAAO,SAACC,GAAD,OAAUA,EAAKb,KAAKc,QAC3BC,KAAI,SAACF,GAAD,gBAAaA,EAAKG,MAAlB,cAA6BH,EAAKb,KAAKc,KAAKG,QAC/CC,EAAO,IAAIC,KAAK,CAACR,EAAYS,KAAK,OAAQ,CAACjB,KAAM,6BACvDkB,QAAQC,IAAIJ,GACZK,iBAAOL,EAAM,aAe4BM,KAArC,aAIF,6BACGjC,GAAW,2CACXE,GAAS,iEAEM,IAAjBJ,EAAMqB,QACL,+BACE,+BACE,4BACE,qCACA,qCAGJ,+BACGrB,EAAM0B,KACL,SAACF,GAAD,OACEA,EAAKb,KAAKc,MACR,wBAAIW,IAAKZ,EAAKa,IACZ,4BAAKb,EAAKb,KAAKgB,OACf,4BACE,uBAAGW,KAAMd,EAAKb,KAAKc,KAAKG,KAAxB,iBCxDFW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBCXAC,EAAgBC,cAEtBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAQC,QAASL,GACf,kBAAC,EAAD,QAGJM,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEd5C,OAAM,SAAAR,GACL4B,QAAQ5B,MAAMA,EAAMqD,c","file":"static/js/main.b553dd6e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { saveAs } from 'file-saver'\n\nfunction App() {\n  const [inputState, setInputState] = useState(\"\");\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const request = async () => {\n    setError(false);\n    setLoading(true);\n    await axios\n      .get(`/api/d3/?domain=${inputState}`)\n      .then((data) => setPosts(data.data))\n      .catch((err) => {\n        setError(true);\n        setLoading(false);\n        throw err;\n      });\n    setLoading(false);\n  };\n\n  const saveFile = () => {\n    const postsToFile = posts\n        .filter((post) => post.data.link)\n        .map((post) => `${post.title} / ${post.data.link.url}`)\n    const blob = new Blob([postsToFile.join('\\n')], {type: \"text/plain;charset=utf-8\"})\n    console.log(blob);\n    saveAs(blob, 'posts.txt')\n  };\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        placeholder=\"введите подсайт\"\n        value={inputState}\n        onChange={(e) => setInputState(e.target.value)}\n      />\n      <button type=\"button\" onClick={() => request()}>\n        YARRR!!!\n      </button>\n      {posts.length !== 0 && (\n        <button type=\"button\" onClick={() => saveFile()}>\n          Save File\n      </button>\n      )}\n      <div>\n        {loading && <div>Loading...</div>}\n        {error && <div>Error. Try again latter please.</div>}\n      </div>\n      {posts.length !== 0 && (\n        <table>\n          <thead>\n            <tr>\n              <td>Title</td>\n              <td>URL</td>\n            </tr>\n          </thead>\n          <tbody>\n            {posts.map(\n              (post) =>\n                post.data.link && (\n                  <tr key={post.id}>\n                    <td>{post.data.title}</td>\n                    <td>\n                      <a href={post.data.link.url}>Link</a>\n                    </td>\n                  </tr>\n                )\n            )}\n          </tbody>\n        </table>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Router } from 'react-router'\nimport { createBrowserHistory  } from 'history'\n\nconst customHistory = createBrowserHistory()\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router history={customHistory}>\n      <App />\n    </Router>     \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}