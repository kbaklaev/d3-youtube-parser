{"version":3,"sources":["components/loader.js","App.js","serviceWorker.js","index.js"],"names":["Loader","className","requestPosts","App","useState","inputState","setInputState","posts","setPosts","loading","setLoading","error","setError","fetch","a","page","newPosts","axios","get","then","data","catch","err","length","type","placeholder","value","onChange","e","target","onKeyDown","key","onClick","title","postsToFile","filter","post","link","map","url","blob","Blob","join","saveAs","saveFile","xmlns","viewBox","d","index","id","href","Boolean","window","location","hostname","match","customHistory","createBrowserHistory","ReactDOM","render","StrictMode","history","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.71361222.chunk.js","sourcesContent":["import React from 'react'\r\nimport './loader.css'\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"lds-ring\">\r\n      <div />\r\n      <div />\r\n      <div />\r\n      <div />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Loader","import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { saveAs } from \"file-saver\";\n\nimport Loader from './components/loader'\n\nlet requestPosts = [];\n\nfunction App() {\n  const [inputState, setInputState] = useState(\"\");\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const fetch = async () => {\n    setError(false);\n    setLoading(true);\n    for (let page = 1; page <= 75; page += 1) {\n      let newPosts;\n      await axios\n        .get(\n          `https://d3.ru/api/domains/${inputState}/posts/?per_page=42&page=${page}`\n        )\n        .then((data) => {\n          newPosts = data.data.posts;\n        })\n        .catch((err) => {\n          setError(true);\n          setLoading(false);\n          throw err;\n        });\n      requestPosts = [...requestPosts, ...newPosts];\n      if (newPosts.length < 42) break;\n    }\n    setPosts(requestPosts);\n    setLoading(false);\n  };\n\n  const saveFile = () => {\n    const postsToFile = posts\n      .filter((post) => post.data.link)\n      .map((post) => `${post.title} / ${post.data.link.url}`);\n    const blob = new Blob([postsToFile.join(\"\\n\")], {\n      type: \"text/plain;charset=utf-8\",\n    });\n    saveAs(blob, \"posts.txt\");\n  };\n\n  const onKeyDown = (e) => {\n    if (e.key === \"Enter\") fetch();\n  };\n\n  return (\n    <div className=\"h-screen grid grid-cols-5\">\n      <div className=\"col-start-2 col-end-5 p-4 flex flex-col overflow-hidden\">\n        <header className=\"flex p-4 mb-2 h-18 bg-gray-400 rounded\">\n          <input\n            className=\"mx-4 appearance-none border-2 border-gray-500 rounded py-2 px-4 text-gray-800 leading-tight focus:outline-none focus:bg-white focus:border-indigo-500\"\n            type=\"text\"\n            placeholder=\"enter a domain name\"\n            value={inputState}\n            onChange={(e) => setInputState(e.target.value)}\n            onKeyDown={(e) => onKeyDown(e)}\n          />\n          <button\n            className=\"mx-4 bg-indigo-500 hover:bg-white text-white font-semibold hover:text-indigo-500 py-2 px-4 border border-indigo-500 rounded\"\n            type=\"button\"\n            onClick={() => fetch()}\n          >\n            YARRR!!!\n          </button>\n          {posts.length !== 0 && (\n            <button\n              className=\"mx-4 bg-indigo-500 hover:bg-white text-white font-semibold hover:text-indigo-500 py-2 px-4 border border-indigo-500 rounded inline-flex items-center\"\n              type=\"button\"\n              title=\"save txt\"\n              onClick={() => saveFile()}\n            >\n              <svg\n                className=\"fill-current w-4 mr-2\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                viewBox=\"0 0 25 20\"\n              >\n                <path d=\"M13 8V2H7v6H2l8 8 8-8h-5zM0 18h20v2H0v-2z\" />\n              </svg>\n              Download\n            </button>\n          )}\n        </header>\n        {\n          loading && \n          <div className=\"flex justify-center h-full\">\n            <div className=\"text-center flex content-center flex-wrap\">\n              <Loader />\n            </div>\n          </div>\n        }\n        {error && <div>Error. Please, try it again later.</div>}\n        <div className=\"w-full h-auto overflow-y-scroll\">\n          {posts.length !== 0 && (\n            <table className=\"table-auto w-full\">\n              <thead>\n                <tr>\n                  <th className=\"px-4 py-2\">#</th>\n                  <th className=\"px-4 py-2\">Title</th>\n                  <th className=\"px-4 py-2\">URL</th>\n                </tr>\n              </thead>\n              <tbody>\n                {posts.map(\n                  (post, index) =>\n                    post.data.link && (\n                      <tr key={post.id}>\n                        <td className=\"border px-4 py-2\">{index}</td>\n                        <td className=\"border px-4 py-2\">{post.data.title}</td>\n                        <td className=\"border px-4 py-2\">\n                          <a href={post.data.link.url}>Link</a>\n                        </td>\n                      </tr>\n                    )\n                )}\n              </tbody>\n            </table>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Router } from 'react-router'\r\nimport { createBrowserHistory  } from 'history'\r\n\r\nimport './app.css'\r\n\r\nconst customHistory = createBrowserHistory()\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router history={customHistory}>\r\n      <App />\r\n    </Router>     \r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}